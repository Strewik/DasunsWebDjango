"""
Django settings for DasunsWebApp project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import django_heroku
from pathlib import Path
from getenv import env

from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

DEFAULT_AUTO_FIELD='django.db.models.AutoField' 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['dasuns.org', '127.0.0.1','www.dasuns.org','https://dasuns.org/']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'profiles.apps.ProfilesConfig',
    'django_filters',
    'crispy_forms',
    'formtools',
    'bootstrap_datepicker_plus',
    "bootstrap4",
    'multiselectfield',      
    'django_cleanup',
      
]


CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DasunsWebApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DasunsWebApp.wsgi.application'

TIME_INPUT_FORMATS = ('%H:%M',)


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
    # Connection to Local Database :nSqlite3
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),

    # Connection to Local Database : PostgresQL
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('DB_NAME'),
        # 'HOST': os.getenv('DB_HOST_NAME'),
        # 'PORT': os.getenv('DB_APP_PORT'),
        # 'USER': os.getenv('DB_USERNAME'),
        # 'PASSWORD': os.getenv('DB_PASSWORD'),   
    # Connection to Remote Database : PostgresQL
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('DB_NAME'),
        # 'HOST': os.getenv('DB_HOST_NAME'),
        # 'PORT': os.getenv('DB_APP_PORT'),
        # 'USER': os.getenv('DB_USERNAME'),
        # 'PASSWORD': os.getenv('DB_PASSWORD'), 

    # Connection to Remote / cloud Database : PostgresQL
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('AWS_PGDB_INITIAL_DATABASE_NAME'),
        # 'HOST': os.getenv('AWS_PGDB_ENDPOINT'),
        # 'PORT': os.getenv('AWS_PGDB_PORT'),
        # 'USER': os.getenv('AWS_PGDB_MASTERUSERNAME'),
        # 'PASSWORD': os.getenv('AWS_PGDB_MASTERPASSWORD'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Kampala'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/media') 
STATIC_URL = '/static/'
STATIC_TMP = os.path.join(BASE_DIR, 'staticfile')
os.makedirs(STATIC_TMP, exist_ok=True)
os.makedirs(STATIC_ROOT, exist_ok=True)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_ROOT = os.path.join(BASE_DIR, 'static') 
MEDIA_URL = '/media/' 

# # AWS EMAIL_BACKEND SET UP
# EMAIL_BACKEND = 'django_ses.SESBackend'
# AWS_ACCESS_KEY_ID = 'YOUR-ACCESS-KEY-ID'
# AWS_SECRET_ACCESS_KEY = 'YOUR-SECRET-ACCESS-KEY'
# AWS_SES_REGION_NAME = 'REGION-NAME' #(ex: us-east-2)
# AWS_SES_REGION_ENDPOINT ='REGION-ENDPOINT' #(ex: email.us-east-2.amazonaws.com)


# email for notification
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'dasunsdev@gmail.com'
# EMAIL_HOST_PASSWORD ='asbpgcsbnljiqgpx'


django_heroku.settings(locals())
